
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиФормы(Отказ);
	ЗаполнитьТаблицы(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура НастройкиФормы(Отказ)
	
	Скрам = БИТС_Скрам.Настройки();
	Спринт = БИТС_Скрам.Спринт(Скрам["URL_API"], Скрам["GROUP_ID"]);
	
	Для Каждого Настройка Из Скрам Цикл
		ЭтаФорма[Настройка.Ключ] = Настройка.Значение;
	КонецЦикла;
	
	Для Каждого Настройка Из Спринт Цикл
		ЭтаФорма[Настройка.Ключ] = Настройка.Значение;
	КонецЦикла;
	 
	ЭтаФорма.Заголовок = ПредставлениеСпринта(Спринт);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

#Область КомандыОбщие

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	ЗаполнитьТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура Дайджест(Команда)
	ДайджестНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДайджестНаСервере()
	
	ВыбранныеЗадачи = ВыбранныеЗадачи(); 
	Если ВыбранныеЗадачи.Количество() = 0 Тогда
		Сообщить("Задачи не выбраны");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультаты(Команда)
	
	РезультатыЗадач = ПолучитьРезультатыНаСервере();
	Для Каждого ТаблицаФормы Из БИТС_Скрам.Стадии(URL_API, SPRINT_ID) Цикл
		ИмяЭлемента = "Задачи" + ТаблицаФормы.Значение["Наименование"];
		Для Каждого Строка Из ЭтаФорма[ИмяЭлемента] Цикл
			
			РезультатыЗадачи = РезультатыЗадач[Строка["id"]];
			Если РезультатыЗадачи = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатыНаСервере()
	
	Результат = Новый Соответствие;
	
	ВыбранныеЗадачи = ВыбранныеЗадачи(); 
	Если ВыбранныеЗадачи.Количество() = 0 Тогда
		Сообщить("Задачи не выбраны");
		Возврат Результат;
	КонецЕсли; 
	
	Для Каждого Задача Из ВыбранныеЗадачи Цикл
		
		Результат[Задача] = Новый Массив;
		
		Ответ = OPI_Bitrix24.ПолучитьСписокРезультатов(URL_API, Задача);
		Если Ответ["result"] = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого РезультатЗадачи Из Ответ["result"] Цикл
			СтруктураРезультата = Новый Структура("formattedText, files");
			СтруктураРезультата["formattedText"] = РезультатЗадачи["formattedText"];
			СтруктураРезультата["files"] = РезультатЗадачи["files"];
			Результат[Задача].Добавить(СтруктураРезультата);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВремяЗаСпринт(Команда)
	
	ВремяЗаСпринт = ВремяЗаСпринтНаСервере();
	Для Каждого ТаблицаФормы Из БИТС_Скрам.Стадии(URL_API, SPRINT_ID) Цикл
		ИмяЭлемента = "Задачи" + ТаблицаФормы.Значение["Наименование"];
		Для Каждого Строка Из ЭтаФорма[ИмяЭлемента] Цикл
			
			ЗатратыЗадачи = ВремяЗаСпринт[Строка["id"]];
			Если ЗатратыЗадачи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Строка["timeSpentInLogs"] = Строка(ЗатратыЗадачи["Всего"]);
			Строка["ВремяЗаСпринт"] = Строка(ЗатратыЗадачи["ЗаСпринт"]); 
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВремяЗаСпринтНаСервере()
	
	Результат = Новый Соответствие;
	
	ВыбранныеЗадачи = ВыбранныеЗадачи(); 
	Если ВыбранныеЗадачи.Количество() = 0 Тогда
		Сообщить("Задачи не выбраны");
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Задача Из ВыбранныеЗадачи Цикл
		
		Результат[Задача] = Новый Структура("Всего, ЗаСпринт", 0, 0);
		
		Ответ = OPI_Bitrix24.ПолучитьСписокТрудозатратЗадачи(URL_API, Задача);
		Если Ответ["result"] = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого Затрата Из Ответ["result"] Цикл
			Часы = СекундыВЧасы(Затрата["SECONDS"]);
			ДатаЗатраты = ДатаИзСтроки(Затрата["DATE_START"]);
			Результат[Задача]["Всего"] = Результат[Задача]["Всего"] + Часы;
			Если ДатаЗатраты >= SPRINT_START И ДатаЗатраты <= SPRINT_END Тогда
				Результат[Задача]["ЗаСпринт"] = Результат[Задача]["ЗаСпринт"] + Часы;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КомандыТаблиц

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	ИмяТаблицы = СтрЗаменить(ЭтаФорма.ТекущийЭлемент.Имя, "ВыделитьВсе", "");
	Для Каждого Строка Из ЭтаФорма[ИмяТаблицы] Цикл
		Строка.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ИмяТаблицы = СтрЗаменить(ЭтаФорма.ТекущийЭлемент.Имя, "СнятьВсе", "");
	Для Каждого Строка Из ЭтаФорма[ИмяТаблицы] Цикл
		Строка.Выбран = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСТаблицами

&НаСервере
Процедура ЗаполнитьТаблицы(Отказ = Ложь)
	
	ОчиститьТаблицы();
	
	Для Каждого МассивЗадач Из ВсеЗадачи() Цикл
		Для Каждого Задача Из МассивЗадач Цикл
			СтрокаЗадачи = TASKS.Добавить();
			ИмяЭлемента = "Задачи" + БИТС_Скрам.Стадии(URL_API, SPRINT_ID)[Задача["stageId"]]["Наименование"];
			СтрокаСтадии = ЭтаФорма[ИмяЭлемента].Добавить();
			Для Каждого Поле Из Задача Цикл
				
				СтрокаСтадии["НадписьТаблицыВремя"] = "Время в часах";
				СтрокаСтадии["НадписьТаблицыВсего"] = "Всего:";
				СтрокаСтадии["НадписьТаблицыЗаСпринт"] = "Спринт:";
				СтрокаСтадии["НадписьТаблицыОценка"] = "Оценка:";
				
				СтрокаЗадачи[Поле.Ключ] = Расшифровка(Поле);
				СтрокаСтадии[Поле.Ключ] = Расшифровка(Поле);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицы()
	
	ЭтаФорма.TASKS.Очистить();
	Для Каждого Таблица Из БИТС_Скрам.Стадии(URL_API, SPRINT_ID) Цикл
		ИмяЭлемента = "Задачи" + Таблица.Значение["Наименование"]; 
		ЭтаФорма[ИмяЭлемента].Очистить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЗадачами

&НаСервере
Функция ВыбранныеЗадачи()
	
	Результат = Новый Массив;
	
	Для Каждого Стадия Из БИТС_Скрам.Стадии(URL_API, SPRINT_ID) Цикл
		ИмяЭлемента = "Задачи" + Стадия.Значение["Наименование"];
		Для Каждого Задача Из ЭтаФорма[ИмяЭлемента] Цикл
			Если Задача.Выбран Тогда
				Результат.Добавить(Задача.id);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Расшифровка(Поле)
	
	Результат = Поле.Значение;
	
	Если Поле.Ключ = "timeSpentInLogs" ИЛИ Поле.Ключ = "timeEstimate" Тогда
		Если ЗначениеЗаполнено(Поле.Значение) Тогда
			Результат = Строка(СекундыВЧасы(Поле.Значение));
		Иначе
			Результат = "0";
		КонецЕсли;
	ИначеЕсли Поле.Ключ = "description" Тогда
		РегулярноеВыражение = "\[(/?[^\]]+)\]";
		Результат = СтрЗаменитьПоРегулярномуВыражению(Поле.Значение, РегулярноеВыражение, "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеСпринта(Знач Спринт)
	
	Результат = "";
	
	ДатаНачала = ПредставлениеДаты(Спринт["SPRINT_START"]);
	ДатаОкончания = ПредставлениеДаты(Спринт["SPRINT_END"]);
	Результат = СтрШаблон("%1 с %2 по %3", Спринт["SPRINT_NAME"], ДатаНачала, ДатаОкончания);
	
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПредставлениеДаты(Знач Строка) 
	Возврат СтрРазделить(Строка, "T")[0];
КонецФункции

&НаСервереБезКонтекста
Функция ДатаИзСтроки(Знач Строка)
	Возврат Дата(СтрЗаменить(СтрРазделить(Строка, "T")[0], "-", ""))
КонецФункции

&НаСервереБезКонтекста
Функция СекундыВЧасы(Секунды)
	Возврат Число(Секунды) / Число("3600");
КонецФункции

&НаСервере
Функция ВсеЗадачи()
	
	Результат = Новый Массив;
	
	Отступ = 0;
	Всего = 100;
	Фильтр = Новый Структура;
	Фильтр.Вставить("GROUP_ID", GROUP_ID);
	Фильтр.Вставить("SPRINT_ID", SPRINT_ID);
	Поля = "";
	Пока Отступ < Всего Цикл
		Ответ = OPI_Bitrix24.ПолучитьСписокЗадач(URL_API, Фильтр, Отступ,, Поля);
		Если Ответ["result"] = Неопределено Тогда 
			Возврат Результат;
		Иначе
			Результат.Добавить(Ответ["result"]["tasks"]);
			Отступ = ?(Ответ["next"] = Неопределено, Число(Ответ["total"]), Число(Ответ["next"]));
			Всего = Число(Ответ["total"]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВидимостьСтадии(Команда) 
	
	Если ЭтаФорма.ТекущийЭлемент.ЦветФона = WebЦвета.СветлоКоралловый Тогда
		ЭтаФорма.ТекущийЭлемент.ЦветФона = WebЦвета.НейтральноАквамариновый;
	Иначе
		ЭтаФорма.ТекущийЭлемент.ЦветФона = WebЦвета.СветлоКоралловый
	КонецЕсли;
	
	ИмяГруппы = СтрЗаменить(ЭтаФорма.ТекущийЭлемент.Имя, "ВидимостьСтадии", "ГруппаСтадия");
	Элементы[ИмяГруппы].Видимость = НЕ Элементы[ИмяГруппы].Видимость; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти  
